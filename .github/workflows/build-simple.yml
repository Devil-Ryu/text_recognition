name: 构建多架构包 (简化版)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        architecture: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r models/requirements.txt
        pip install pyinstaller
    
    - name: 构建macOS ${{ matrix.architecture }} 包
      run: |
        if [ "${{ matrix.architecture }}" = "arm64" ]; then
          export ARCHFLAGS="-arch arm64"
        else
          export ARCHFLAGS="-arch x86_64"
        fi
        
        pyinstaller --onefile \
          --add-data "models:models" \
          --add-data "assets:assets" \
          --hidden-import cv2 \
          --hidden-import numpy \
          --hidden-import PIL \
          --hidden-import onnxruntime \
          --hidden-import shapely \
          --hidden-import pyclipper \
          --name "ocr_server_macos_${{ matrix.architecture }}" \
          run_server.py
    
    - name: 上传macOS ${{ matrix.architecture }} 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ocr-server-macos-${{ matrix.architecture }}
        path: dist/ocr_server_macos_${{ matrix.architecture }}

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r models/requirements.txt
        pip install pyinstaller
    
    - name: 构建Windows ${{ matrix.architecture }} 包
      run: |
        pyinstaller --onefile ^
          --add-data "models;models" ^
          --add-data "assets;assets" ^
          --hidden-import cv2 ^
          --hidden-import numpy ^
          --hidden-import PIL ^
          --hidden-import onnxruntime ^
          --hidden-import shapely ^
          --hidden-import pyclipper ^
          --name "ocr_server_windows_${{ matrix.architecture }}" ^
          run_server.py
    
    - name: 上传Windows ${{ matrix.architecture }} 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ocr-server-windows-${{ matrix.architecture }}
        path: dist/ocr_server_windows_${{ matrix.architecture }}.exe

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
    
    - name: 创建发布包
      run: |
        mkdir -p release
        for artifact in ocr-server-*; do
          if [ -d "$artifact" ]; then
            cp -r "$artifact"/* release/
          fi
        done
        
        # 创建压缩包
        tar -czf ocr-server-release.tar.gz -C release .
        zip -r ocr-server-release.zip release/
    
    - name: 上传发布包
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: |
          ocr-server-release.tar.gz
          ocr-server-release.zip 