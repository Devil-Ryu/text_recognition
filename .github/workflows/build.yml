name: 构建多架构包

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        # 安装Python依赖，使用预编译的wheel包
        pip install --only-binary=all -r models/requirements.txt
        pip install pytest pytest-cov
    
    - name: 运行测试
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml
    
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        architecture: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        # 安装Python依赖，使用预编译的wheel包
        pip install --only-binary=all -r models/requirements.txt
        pip install pyinstaller
    
    - name: 构建macOS ${{ matrix.architecture }} 包
      run: |
        if [ "${{ matrix.architecture }}" = "arm64" ]; then
          export ARCHFLAGS="-arch arm64"
        else
          export ARCHFLAGS="-arch x86_64"
        fi
        
        # 使用build文件夹内的优化配置
        pyinstaller --clean \
          --distpath dist/packages \
          --workpath build/build_optimized \
          build/configs/ocr_server_optimized.spec \
          --name "ocr_server_macos_${{ matrix.architecture }}"
    
    - name: 上传macOS ${{ matrix.architecture }} 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ocr-server-macos-${{ matrix.architecture }}
        path: dist/packages/ocr_server_macos_${{ matrix.architecture }}

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, x86]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        # 安装Python依赖，使用预编译的wheel包
        pip install --only-binary=all -r models/requirements.txt
        pip install pyinstaller
    
    - name: 构建Windows ${{ matrix.architecture }} 包
      shell: cmd
      run: |
        # 使用build文件夹内的优化配置
        pyinstaller --clean ^
          --distpath dist/packages ^
          --workpath build/build_optimized ^
          build/configs/ocr_server_optimized.spec ^
          --name "ocr_server_windows_${{ matrix.architecture }}"
    
    - name: 上传Windows ${{ matrix.architecture }} 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ocr-server-windows-${{ matrix.architecture }}
        path: dist/packages/ocr_server_windows_${{ matrix.architecture }}.exe

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        # 安装Python依赖，使用预编译的wheel包
        pip install --only-binary=all -r models/requirements.txt
        pip install pyinstaller
    
    - name: 构建Linux ${{ matrix.architecture }} 包
      run: |
        if [ "${{ matrix.architecture }}" = "arm64" ]; then
          export ARCHFLAGS="-arch arm64"
        else
          export ARCHFLAGS="-arch x86_64"
        fi
        
        # 使用build文件夹内的优化配置
        pyinstaller --clean \
          --distpath dist/packages \
          --workpath build/build_optimized \
          build/configs/ocr_server_optimized.spec \
          --name "ocr_server_linux_${{ matrix.architecture }}"
    
    - name: 上传Linux ${{ matrix.architecture }} 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ocr-server-linux-${{ matrix.architecture }}
        path: dist/packages/ocr_server_linux_${{ matrix.architecture }}

  create-release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
    
    - name: 创建发布包
      run: |
        mkdir -p release
        for artifact in ocr-server-*; do
          if [ -d "$artifact" ]; then
            cp -r "$artifact"/* release/
          fi
        done
        
        # 创建压缩包
        tar -czf ocr-server-release.tar.gz -C release .
        zip -r ocr-server-release.zip release/
    
    - name: 上传发布包
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: |
          ocr-server-release.tar.gz
          ocr-server-release.zip 